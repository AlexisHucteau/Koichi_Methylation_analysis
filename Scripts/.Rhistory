df[,1] <- as.numeric(df[,1])
colnames(df)[1] <- "Gene"
df
}
Make_gene_expr_boxplots <- function(RNAseq, Gene_to_focus, Comparison_A, Comparison_A_name, Comparison_B, Comparison_B_name, Phenotype){
Phenotype_of_interest <- Phenotype
Data_on_the_gene <- Focus_on_one_gene_not_TF(RNAseq, Gene_to_focus, Comparison_A, Comparison_A_name, Comparison_B, Comparison_B_name, Phenotype)
ggplot(Data_on_the_gene, aes(x=Phenotype, y = Gene, fill=Phenotype))+
geom_boxplot() +
geom_jitter(Data_on_the_gene, inherit.aes = FALSE, mapping = aes(y = Gene, x = Phenotype), width = 0.25, alpha = 0.5, colour = "darkred")+
ggtitle(paste("Expression", Gene_to_focus, Comparison_A_name, "vs", Comparison_B_name))+
ylab("Gene expression")
}
# Network signatures
Prepare_features <- function(feature_data_frame, column_of_interest, type_of_data){
if(type_of_data == "DEG"){
res <- feature_data_frame[,column_of_interest]
colnames(res)[1:3] <- c("Gene", "logFC", "P.Value")
}else{
res <- feature_data_frame[,column_of_interest]
colnames(res)[1:3] <- c("Gene", "nes", "pval")
}
return(res)
}
Find_most_importants_genes <- function(network){
res <- list()
ranked_eigen_gene <- network$features[order(-network$features$Eigen_centrality),] %>% head(15) %>% .$Gene
ranked_page_rank_gene <- network$features[order(-network$features$Page_rank),] %>% head(15) %>% .$Gene
res$ranked_eigen_gene <- ranked_eigen_gene
res$ranked_page_rank_gene <- ranked_page_rank_gene
V_of_interest <- V(network$network) %>% .[which(names(.) %in% intersect(ranked_eigen_gene, ranked_page_rank_gene))]
E_of_interest <- E(network$network)[from(V_of_interest) | to(V_of_interest)]
filtered_graph <- subgraph.edges(network$network, E_of_interest)
res$network <- filtered_graph
return(res)
}
Prepare_Cytoscape_network <- function(Big_Network = igraph_PPI_TF_target_Network, DEG_analysis, TF_analysis, logFC_treshold = 0.75){
DEG_of_interest <- DEG_analysis %>% dplyr::filter(abs(logFC) > logFC_treshold & P.Value < 0.1) %>% .$Gene
TF_of_interest <- TF_analysis %>% dplyr::filter(pval < 0.1) %>% .$Gene
V_of_interest <- V(Big_Network) %>% .[which(names(.) %in% unique(c(DEG_of_interest, TF_of_interest)))]
filtered_graph <- induced_subgraph(Big_Network, V_of_interest)
eigen_centrality_result <- eigen_centrality(filtered_graph, directed = F)$vector
page_rank_result <- igraph::page.rank(filtered_graph, directed = F)$vector
features <- merge(DEG_analysis, TF_analysis, by = "Gene", all = T)
features <- merge(features, eigen_centrality_result, by.x = "Gene", by.y = 0, all = T)
colnames(features)[ncol(features)] <- "Eigen_centrality"
features <- merge(features, page_rank_result, by.x = "Gene", by.y = 0, all = T)
colnames(features)[ncol(features)] <- "Page_rank"
set(features,which(is.na(features[["nes"]])),"nes",0)
set(features,which(is.na(features[["pval"]])),"pval",1)
set(features,which(is.na(features[["Eigen_centrality"]])),"Eigen_centrality",0)
set(features,which(is.na(features[["Page_rank"]])),"Page_rank",0)
features$TF <- ifelse(features$nes == 0, F, T)
clustering_eigen <- cluster_leading_eigen(filtered_graph) %>% membership() %>% print() %>% data.frame()
features <- merge(features, clustering_eigen, by.x = "Gene", by.y = 0, all = T)
set(features,which(is.na(features[["."]])),".",999)
colnames(features)[ncol(features)] <- "Cluster"
res <- list("features" = features,
"network" = filtered_graph
)
res$most_important_network <- Find_most_importants_genes(res)
return(res)
}
All_workflow <- function(feature_DEG_df, column_DEG, feature_tf_df, column_TF, NET = igraph_PPI_TF_target_Network, logFC_treshold = 0.75){
DEG <- Prepare_features(feature_DEG_df, column_DEG, "DEG")
TF <- Prepare_features(feature_tf_df, column_TF, "TF")
res <- Prepare_Cytoscape_network(NET, DEG, TF, logFC_treshold)
return(res)
}
Combined_network <- read.csv("~/GitHub/Koichi_gene_expression_git/Koichi_gene_expression_analyses/Results/Tables/Combined_Networks.tsv", sep = "\t")
PPI_TF_target_Network <- graph_from_data_frame(Combined_network, directed = T)
NR_R_network <- All_workflow(RNAseq_diff_gene_expression_analysis$R_OR_NR_B$`NR.B-R.B`, c(7, 1, 4), R_NR_msviper$mrs_table, c(1,3,4), PPI_TF_target_Network)
write.csv(NR_R_network$features, "~/tmp/NR_R_network_features.csv", quote = F)
NR_R_network$network %>% igraph::as_data_frame() %>% write.csv("~/tmp/NR_R_network_network.csv", quote = F)
Do_cool_scatterplot <- function(Feature, title){
Feature <- dplyr::filter(Feature, Eigen_centrality > 0.0005 & Page_rank != 0)
DEG <- ifelse(Feature$logFC < 0, "DOWN", "UP")
ggplot(Feature, aes(x = log(Page_rank), y = log(Eigen_centrality), label = Gene, colour = DEG))+
geom_text(check_overlap = F, size = 2, nudge_x = 0.05, hjust = 0, outlier.size = 0)+
geom_point(size = 0.5)+
labs(title = paste0("Network-based node prioritization ", title))+
xlab("Page Rank (log)")+
ylab("Eigen Centrality (log)")+
scale_colour_manual(values=c("#0000FF", "#FF0000"))
}
Variability_in_Patients <- data.frame(Variability = sapply(RNAseq, function(x){var(x)}),
Pheno = Factor_R_OR_NR_B)
library("locfit")
getEV <- function(x, cutoff=NULL, plot=FALSE, ...) {
if (!is.matrix(x) || !is.numeric(x)) {
stop("argument 'x' must be a numeric matrix")
}
if (!is.null(cutoff)) {
if (!is.numeric(cutoff)) {
stop("argument 'cutoff' must be numeric")
}
x[x<cutoff] <- NA
}
mns <- rowMeans(x, na.rm=TRUE)
sds <- matrixStats::rowSds(x, na.rm=TRUE)
drop <- is.na(sds) & is.na(mns)
mns <- mns[!drop]
sds <- sds[!drop]
fit <- locfit(sds^2 ~ lp(mns), family="gamma", maxk =500)
expSd <- sqrt(predict(fit, mns))
ev <- rep(NA, nrow(x))
ev[!drop] <- log2(sds) - log2(expSd)
if (plot) {
smoothScatter(mns, sds, xlab="mean expression", ylab="std. dev. expression", ...)
f1 <- function(x) sqrt(predict(fit,x))
curve(f1, from=min(mns), to=max(mns), col="red", add=TRUE)
}
ev
}
Raw_count <- read.csv("GitHub/Koichi_gene_expression_git/Koichi_gene_expression_analyses/DATA/GSE153348_IDH_RNA_Seq_matrix_submission.txt", sep = "\t", check.names = F) %>% t() %>% as.matrix()
test <- getEV(x = Raw_count, plot = T)
#
# #We need the expression values in a matrix
# nlc=read.table("/Volumes/Maxtor_Fla/CRCT/MicroArrays/Vera_table/CLL_Genes_Expression_Table.txt",header = T)[,c(1,13:31)]
# rownames(nlc)=nlc[,1]
# nlc=as.matrix(nlc[,2:ncol(nlc)])
# tmp <- getEV(nlc)
# nlc=as.data.frame(nlc)
# nlc$ev_nlc <- tmp
# mono <- as.matrix(exprs_mono)
# neut <- as.matrix(exprs_neut)
# tcel <- as.matrix(exprs_tcel)
# #We need all groups (here, three) in one matrix so that EVs are comparable across them
# #Create unique rownames to be able to bind rows
# rownames(mono) <- paste("mono", rownames(mono), sep="_")
# rownames(neut) <- paste("neut", rownames(neut), sep="_")
# rownames(tcel) <- paste("tcel", rownames(tcel), sep="_")
# #Create one big matrix containing all data, EV will be calculated per row
# exprs_joined <- rbind(mono, rbind(neut, tcel))
# #Calculate EV using the above defined function
# tmp <- getEV(exprs_joined)
# #Now separate the results again into the three groups we had initially
# result$ev_mono <- tmp[1:(dim(exprs_joined)[1]/3)]
# result$ev_neut <- tmp[((dim(exprs_joined)[1]/3)+1):((dim(exprs_joined)[1]/3)*2)]
# result$ev_tcel <- tmp[(((dim(exprs_joined)[1]/3)*2)+1):dim(exprs_joined)[1]]
gc()
Raw_count <- read.csv("GitHub/Koichi_gene_expression_git/Koichi_gene_expression_analyses/DATA/GSE153348_IDH_RNA_Seq_matrix_submission.txt", sep = "\t", check.names = F) %>%
as.matrix()
test <- getEV(x = Raw_count, plot = T)
colnames(Raw_count)
Factor_R_OR_NR_B
Good_responder <- Raw_count[,Factor_R_OR_NR_B=="R.B"]
View(Good_responder)
Bad_responder <- Raw_count[,Factor_R_OR_NR_B=="NR.B"]
Relapse_responder <- Raw_count[,Factor_R_OR_NR_B=="OR.REL" | Factor_R_OR_NR_B == "R.REL"]
rownames(Good_responder) <- paste("Good_responder", rownames(Good_responder), sep="_")
rownames(Bad_responder) <- paste("Bad_responder", rownames(Bad_responder), sep="_")
rownames(Relapse_responder) <- paste("Relapse_responder", rownames(Relapse_responder), sep="_")
exprs_joined <- rbind(Good_responder, rbind(Bad_responder, Relapse_responder))
View(Bad_responder)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(dplyr)
library(stringr)
library(DataCombine)
library(VennDiagram)
library(ggvenn)
library(vioplot)
library(pheatmap)
library(igraph)
"%ni%" <- Negate("%in%")
Signatures <- list()
files <- list.files("signatures/")
for (i in files){
Signatures[[i]] <- read.csv(paste0("signatures/", i), sep = "\t") %>% .[,1]
}
Other_signatures <- c(Signatures[["BPRNACan.txt"]],
Signatures[["CBSX_LM22.txt"]],
Signatures[["CBSX_melanoma.txt"]],
Signatures[["CBSX_NSCLC.txt"]],
Signatures[["quanTIseq_TIL10.txt"]]) %>% unique()
Totally_new_genes <- Signatures[["BPRNACan3DProMet.txt"]] %>% .[. %ni% Other_signatures]
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F)
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F, col.names = F)
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F)
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")$x
ggplot(test_empirical, aes(y = x))+ geom_density()
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(y = x))+ geom_density()
ggplot(test_empirical, aes(x))+ geom_density()
ggplot(test_empirical, aes(x))+ geom_density(color = "red") +
ggplot(test_empirical, aes(x))+ geom_density(color = "red")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red"))
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=1, y=32), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.5), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_abline(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
point
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(title = "Empirical interconnection test")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists") +
labels = c("")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists") +
labels(c(""))
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red"), labels = c("")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(dplyr)
library(stringr)
library(DataCombine)
library(VennDiagram)
library(ggvenn)
library(vioplot)
library(pheatmap)
library(igraph)
"%ni%" <- Negate("%in%")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(32, linetype, color, size) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(aes(y=32)) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(yintercept = 32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_vline(xintercept = 32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_vline(xintercept = 32, color = "blue") +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
Signatures <- list()
files <- list.files("signatures/")
for (i in files){
Signatures[[i]] <- read.csv(paste0("signatures/", i), sep = "\t") %>% .[,1]
}
Other_signatures <- c(Signatures[["BPRNACan.txt"]],
Signatures[["CBSX_LM22.txt"]],
Signatures[["CBSX_melanoma.txt"]],
Signatures[["CBSX_NSCLC.txt"]],
Signatures[["quanTIseq_TIL10.txt"]]) %>% unique()
Totally_new_genes <- Signatures[["BPRNACan3DProMet.txt"]] %>% .[. %ni% Other_signatures]
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
# vioplot(Totally_new_genes_expr,
#         col = 1:ncol(Totally_new_genes_expr),
#         outlier = F,
#         ylim = c(0, 2000))
png("test_heatmap.png")
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
dplyr::filter(pchic, pchic$baitName %in% Totally_new_genes | pchic$oeName %in% Totally_new_genes) %>% .[,c(4,5,9,10)] %>% write.csv(., "~/tmp/fig2.csv", quote = F, row.names = F)
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
# vioplot(Totally_new_genes_expr,
#         col = 1:ncol(Totally_new_genes_expr),
#         outlier = F,
#         ylim = c(0, 2000))
png("test_heatmap.png")
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_5.pdf", pointsize = 5)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_20.pdf", pointsize = 20)
pdf("test_heatmap_20.pdf", pointsize = 20)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_not_compressed.pdf", compress = F)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
library(dplyr)
library(ChAMP)
setwd("~/GitHub/Koichi_Methylation_analysis/Scripts/")
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/")
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/", arraytype = "EPIC")
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/")
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(pattern = "_", n = 1)
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% unlist() %>% stringr::str_split(pattern = "_", n = 1)
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_", n = 1)
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_")
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1]})
list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1]}) %>% unique()
samples <- list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1]}) %>% unique()
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", n = 27, skip = 8, sep = "\t")
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 11, n = 27, sep = "\t")
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 11, sep = "\t")
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 11, nrows = 27, sep = "\t")
View(Samplesheet)
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 11, nrows = 26, sep = "\t", check.names = F)
View(Samplesheet)
View(Samplesheet)
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 26, nrows = 11, sep = "\t", check.names = F)
View(Samplesheet)
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 26, nrows = 27, sep = "\t", check.names = F)
View(Samplesheet)
View(Samplesheet)
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 26, nrows = 21, sep = "\t", check.names = F)
View(Samplesheet)
Clinical_data <- read.csv("~/GitHub/Koichi_gene_expression_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv")
View(Clinical_data)
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/", arraytype = "EPIC")
samples
View(Samplesheet)
View(Clinical_data)
samples %>% Clinical_data[which(Baseline_Sample == .),]
samples %>% Clinical_data[which(Clinical_data$Baseline_Sample == .),]
SAmplesheet_from_sample <- rbind(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform", )], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")]
)
SAmplesheet_from_sample <- rbind(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform")], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")])
SAmplesheet_from_sample <- rbind(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform")], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")], deparse.level = 1)
Samplesheet_from_sample <- rbind2(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform")], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")])
Samplesheet_from_sample <- bind_rows(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform")], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")])
View(Samplesheet_from_sample)
Samplesheet_from_sample$Sample <- paste0(Samplesheet_from_sample$Baseline_Sample, Samplesheet_from_sample$Post_treatment_sample)
View(Samplesheet_from_sample)
Samplesheet_from_sample$Sample <- paste0(Samplesheet_from_sample$Baseline_Sample, Samplesheet_from_sample$Post_treatment_sample) %>% stringr::str_remove_all("NA")
View(Samplesheet_from_sample)
View(Samplesheet)
View(Clinical_data)
Samplesheet_from_sample$Pheno <- ifelse(Samplesheet_from_sample$Baseline_Sample,
paste("Baseline", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."),
ifelse(Samplesheet_from_sample$Post_treatment_sample,
paste("Post_treatment", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."), ""))
Samplesheet_from_sample$Pheno <- ifelse(Samplesheet_from_sample$Baseline_Sample == "Baseline",
paste("Baseline", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."),
ifelse(Samplesheet_from_sample$Post_treatment_sample == "Post_treatment",
paste("Post_treatment", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."), ""))
Samplesheet_from_sample$Pheno <- ifelse(!is.na(Samplesheet_from_sample$Baseline_Sample),
paste("Baseline", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."),
ifelse(!is.na(Samplesheet_from_sample$Post_treatment_sample),
paste("Post_treatment", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."), ""))
Samplesheet_from_sample <- Samplesheet_from_sample[Samplesheet_from_sample$Pheno!=""]
Samplesheet_from_sample <- Samplesheet_from_sample[Samplesheet_from_sample$Pheno!="", ]
samples <- list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1]}) %>% unique()
Samplesheet <- read.csv("/media/alexis/DATA/Koichi_methylation_dat/data", skip = 26, nrows = 21, sep = "\t", check.names = F)
Clinical_data <- read.csv("~/GitHub/Koichi_gene_expression_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv")
Samplesheet_from_sample <- bind_rows(Clinical_data[,c("Baseline_Sample", "Best_response", "IDH_isoform")], Clinical_data[,c("Post_treatment_sample", "Best_response", "IDH_isoform")])
Samplesheet_from_sample$Sample <- paste0(Samplesheet_from_sample$Baseline_Sample, Samplesheet_from_sample$Post_treatment_sample) %>% stringr::str_remove_all("NA")
Samplesheet_from_sample$Pheno <- ifelse(!is.na(Samplesheet_from_sample$Baseline_Sample),
paste("Baseline", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."),
ifelse(!is.na(Samplesheet_from_sample$Post_treatment_sample),
paste("Post_treatment", Samplesheet_from_sample$Best_response, Samplesheet_from_sample$IDH_isoform, sep = "."), ""))
Samplesheet_from_sample <- Samplesheet_from_sample[Samplesheet_from_sample$Pheno!="" | is.na(Samplesheet_from_sample$Best_response), ]
Samplesheet_from_sample$Pheno <- ifelse(Samplesheet_from_sample$Pheno == "", "Control", Samplesheet_from_sample$Pheno)
View(Clinical_data)
Samplesheet_from_sample <- Samplesheet_from_sample[, c("Sample", "Pheno")]
View(Samplesheet_from_sample)
write.csv(Samplesheet_from_sample, "/media/alexis/DATA/Koichi_methylation_dat/samplesheet.csv")
write.csv(Samplesheet_from_sample, "/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/samplesheet.csv", row.names = F)
samples <- list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1:2]}) %>% unique()
samples <- list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1:2]})
samples <- list.files("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/") %>% stringr::str_split(., pattern = "_") %>% sapply(function(x){x[1:3]})
seq(1:633, by = 3)
seq(from = 1, to = 633, by = 3)
Samples2 <- data.frame("A" = samples[seq(from = 1, to = 633, by = 3)],
"B" = samples[seq(from = 2, to = 633, by = 3)],
"C" = samples[seq(from = 3, to = 633, by = 3)])
View(Samples2)
View(samples)
View(Samples2)
write.csv("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/Samples2.csv")
write.csv(Samples2, "/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/Samples2.csv")
Samples2 <- data.frame("A" = samples[seq(from = 1, to = 633, by = 3)],
"B" = samples[seq(from = 2, to = 633, by = 3)],
"C" = samples[seq(from = 3, to = 633, by = 3)]) %>%
unique()
View(Samples2)
write.csv(Samples2, "/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/Samples2.csv")
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/", arraytype = "EPIC")
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/", arraytype = "EPIC")
DATA_loaded <- champ.load("/media/alexis/DATA/Koichi_methylation_dat/IDAT_files/", arraytype = "EPIC")
champ.QC(beta = DATA_loaded$beta)
champ.QC(DATA_loaded)
champ.QC(beta = DATA_loaded$beta, pheno = DATA_loaded$pd$Treatment)
QC_analysis <- champ.QC(beta = DATA_loaded$beta, pheno = DATA_loaded$pd$Treatment)
save.image("/media/alexis/DATA/R_session/Methylation_Koichi_in_progress.RData")
