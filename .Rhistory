Bad_responder <- Raw_count[,Factor_R_OR_NR_B=="NR.B"]
Relapse_responder <- Raw_count[,Factor_R_OR_NR_B=="OR.REL" | Factor_R_OR_NR_B == "R.REL"]
rownames(Good_responder) <- paste("Good_responder", rownames(Good_responder), sep="_")
rownames(Bad_responder) <- paste("Bad_responder", rownames(Bad_responder), sep="_")
rownames(Relapse_responder) <- paste("Relapse_responder", rownames(Relapse_responder), sep="_")
exprs_joined <- rbind(Good_responder, rbind(Bad_responder, Relapse_responder))
View(Bad_responder)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(dplyr)
library(stringr)
library(DataCombine)
library(VennDiagram)
library(ggvenn)
library(vioplot)
library(pheatmap)
library(igraph)
"%ni%" <- Negate("%in%")
Signatures <- list()
files <- list.files("signatures/")
for (i in files){
Signatures[[i]] <- read.csv(paste0("signatures/", i), sep = "\t") %>% .[,1]
}
Other_signatures <- c(Signatures[["BPRNACan.txt"]],
Signatures[["CBSX_LM22.txt"]],
Signatures[["CBSX_melanoma.txt"]],
Signatures[["CBSX_NSCLC.txt"]],
Signatures[["quanTIseq_TIL10.txt"]]) %>% unique()
Totally_new_genes <- Signatures[["BPRNACan3DProMet.txt"]] %>% .[. %ni% Other_signatures]
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F)
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F, col.names = F)
write.csv(Totally_new_genes, "~/tmp/fi2_genes.csv", quote = F, row.names = F)
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")$x
ggplot(test_empirical, aes(y = x))+ geom_density()
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(y = x))+ geom_density()
ggplot(test_empirical, aes(x))+ geom_density()
ggplot(test_empirical, aes(x))+ geom_density(color = "red") +
ggplot(test_empirical, aes(x))+ geom_density(color = "red")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red"))
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=1, y=32), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.5), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_abline(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
point
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) + geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18)
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(title = "Empirical interconnection test")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists") +
labels = c("")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists") +
labels(c(""))
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red"), labels = c("")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
labs(colour = "Random gene lists")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_density(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(dplyr)
library(stringr)
library(DataCombine)
library(VennDiagram)
library(ggvenn)
library(vioplot)
library(pheatmap)
library(igraph)
"%ni%" <- Negate("%in%")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(color = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_color_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("Density") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_point(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_line(aes(x=32, y=0.05), color="blue", size =5, shape = 18) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(32, linetype, color, size) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(aes(y=32)) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_hline(yintercept = 32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_vline(xintercept = 32) +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
test_empirical <- read.csv("~/tmp/results_empirical_test.csv")
ggplot(test_empirical, aes(x))+ geom_histogram(aes(fill = "red")) +
geom_vline(xintercept = 32, color = "blue") +
xlab("Genes interconnected") +
ylab("") +
scale_fill_discrete(name="Random gene lists",
labels=c(""))
ggsave("~/tmp/empirical_test_2.png")
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
Signatures <- list()
files <- list.files("signatures/")
for (i in files){
Signatures[[i]] <- read.csv(paste0("signatures/", i), sep = "\t") %>% .[,1]
}
Other_signatures <- c(Signatures[["BPRNACan.txt"]],
Signatures[["CBSX_LM22.txt"]],
Signatures[["CBSX_melanoma.txt"]],
Signatures[["CBSX_NSCLC.txt"]],
Signatures[["quanTIseq_TIL10.txt"]]) %>% unique()
Totally_new_genes <- Signatures[["BPRNACan3DProMet.txt"]] %>% .[. %ni% Other_signatures]
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
# vioplot(Totally_new_genes_expr,
#         col = 1:ncol(Totally_new_genes_expr),
#         outlier = F,
#         ylim = c(0, 2000))
png("test_heatmap.png")
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
dplyr::filter(pchic, pchic$baitName %in% Totally_new_genes | pchic$oeName %in% Totally_new_genes) %>% .[,c(4,5,9,10)] %>% write.csv(., "~/tmp/fig2.csv", quote = F, row.names = F)
BPRNACan3DProMet_genes_expr <- read.csv("BPRNACan3DProMet.csv", row.names = 1)
Totally_new_genes_expr <- BPRNACan3DProMet_genes_expr[Totally_new_genes,]
# vioplot(Totally_new_genes_expr,
#         col = 1:ncol(Totally_new_genes_expr),
#         outlier = F,
#         ylim = c(0, 2000))
png("test_heatmap.png")
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_5.pdf", pointsize = 5)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_20.pdf", pointsize = 20)
pdf("test_heatmap_20.pdf", pointsize = 20)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
pdf("test_heatmap_not_compressed.pdf", compress = F)
pheatmap(as.matrix(Totally_new_genes_expr),
scale = "row", fontsize_row = 7)
dev.off()
library("dplyr")
setwd("~/GitHub/Koichi_Methylation_analysis/")
SRAtable <- read.csv("WGBS_Wilson.txt")
View(SRAtable)
SRAtable <- read.csv("WGBS_Wilson.txt")
Primary_Sample_information <- read.csv("Primary_Sample_information.xlsx")
table(SRAtable)
table(SRAtable$analyte_type)
table(SRAtable$Assay.Type)
dplyr::filter(SRAtable, Assay.Type == "Bisulfite-Seq")
SRAtable_Bisulfite <- dplyr::filter(SRAtable, Assay.Type == "Bisulfite-Seq")
View(SRAtable_Bisulfite)
table(SRAtable_Bisulfite$analyte_type)
SRAtable_Bisulfite_DNA <- dplyr::filter(SRAtable_Bisulfite, analyte_type == "DNA")
View(SRAtable_Bisulfite_DNA)
table(SRAtable_Bisulfite_DNA$body_site)
table(SRAtable_Bisulfite_DNA$histological_type)
summary(SRAtable_Bisulfite_DNA)
sapply(SRAtable_Bisulfite_DNA, function(as.factor()))
sapply(SRAtable_Bisulfite_DNA, function(x){as.factor()})
sapply(SRAtable_Bisulfite_DNA, function(x){as.factor(x)})
sapply(t(SRAtable_Bisulfite_DNA), function(x){as.factor(x)})
sapply(t(SRAtable_Bisulfite_DNA), function(x){x[2]})
sapply(t(SRAtable_Bisulfite_DNA), function(x){x[2] ; print("hello")})
sapply(SRAtable_Bisulfite_DNA, function(x){x[2]})
sapply(head(SRAtable_Bisulfite_DNA), function(x){x})
length(unique(SRAtable_Bisulfite_DNA))
apply(SRAtable_Bisulfite_DNA, 2, function(x){length(duplicated(x))})
apply(SRAtable_Bisulfite_DNA, 2, function(x){length(unique(x))})
apply(SRAtable, 2, function(x){length(unique(x))})
Test <- apply(SRAtable_Bisulfite_DNA, 2, function(x){as.factor(x)})
View(Test)
Test <- apply(SRAtable_Bisulfite_DNA, 2, function(x){as.factor(x)}) %>% as.data.frame()
View(Test)
Test <- SRAtable_Bisulfite_DNA
Test[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)] <- apply(SRAtable_Bisulfite_DNA[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
Test <- SRAtable_Bisulfite_DNA
Test[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)] <- apply(SRAtable_Bisulfite_DNA[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
Test[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)] <- apply(SRAtable_Bisulfite_DNA[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
Test[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)] <- apply(SRAtable_Bisulfite_DNA[c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
Test <- SRAtable_Bisulfite_DNA
Test[,c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)] <- apply(SRAtable_Bisulfite_DNA[c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
data.frame(A=rep(1:2, 3), B=rep(1:3, 2), Pulse=20:25)
levels(Test$body_site)
apply(SRAtable_Bisulfite_DNA[c(10,12,13,14,15,20,21,23,24,25,27,33,35,36,38,39,40:44)], 2, function(x){as.factor(x)})
Test[,c(10,12:15,20,21,23:25,27,33,35,36,38:44)] <- apply(SRAtable_Bisulfite_DNA[c(10,12:15,20,21,23:25,27,33,35,36,38:44)], 2, function(x){as.factor(x)})
apply(SRAtable_Bisulfite_DNA, 2, function(x){length(unique(x))}) > 1
SRAtable_Bisulfite_DNA_factor <- SRAtable_Bisulfite_DNA[,apply(SRAtable_Bisulfite_DNA, 2, function(x){length(unique(x))}) > 1]
View(SRAtable_Bisulfite_DNA_factor)
SRAtable_Bisulfite <- dplyr::filter(SRAtable, Assay.Type == "Bisulfite-Seq" & analyte_type == "DNA" & body_site == "bone_marrow" & Instrument == "Illumina Hiseq 2500")
SRAtable_Bisulfite <- dplyr::filter(SRAtable, Assay.Type == "Bisulfite-Seq" & analyte_type == "dna" & body_site == "bone_marrow" & Instrument == "Illumina Hiseq 2500")
View(SRAtable_Bisulfite)
SRAtable_Bisulfite <- dplyr::filter(SRAtable, (Assay.Type == "Bisulfite-Seq" &
analyte_type == "DNA" &
body_site == "bone_marrow" &
Instrument == "Illumina Hiseq 2500"))
SRAtable_Bisulfite <- dplyr::filter(SRAtable, Assay.Type == "Bisulfite-Seq" &&
analyte_type == "DNA" &&
body_site == "bone_marrow" &&
Instrument == "Illumina Hiseq 2500")
SRAtable_Bisulfite <- SRAtable %>% dplyr::filter(., Assay.Type == "Bisulfite-Seq" &&
.$analyte_type == "DNA" &&
.$body_site == "bone_marrow" &&
.$Instrument == "Illumina Hiseq 2500")
SRAtable_Bisulfite <- SRAtable %>% dplyr::filter(., .$Assay.Type == "Bisulfite-Seq" &&
.$analyte_type == "DNA" &&
.$body_site == "bone_marrow" &&
.$Instrument == "Illumina Hiseq 2500")
SRAtable[,"Instrument"] == "Illumina Hiseq 2500")
SRAtable[,"Assay.Type"] == "Bisulfite-Seq"
SRAtable[,"body_site"] == "bone_marrow"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &&
SRAtable[,"body_site"] == "bone_marrow" &&
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &&
SRAtable[,"body_site"] == "bone_marrow" &&
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &&
SRAtable[,"body_site"] == "bone_marrow"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow"
SRAtable_Bisulfite <- SRAtable %>% SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable_Bisulfite <- SRAtable %>% SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"),]
SRAtable[,"Assay.Type"] == "Bisulfite-Seq"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow"
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable_Bisulfite <- SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"),]
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"),]
SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable[,"Instrument"] == "Illumina Hiseq 2500"
SRAtable_Bisulfite <- SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina HiSeq 2500"),]
SRAtable_Usefull <- SRAtable[which(SRAtable[,"Assay.Type"] == "Bisulfite-Seq" &
SRAtable[,"body_site"] == "bone_marrow" &
SRAtable[,"Instrument"] == "Illumina HiSeq 2500"),]
DMR_GR_C <- read.csv("Results_DMR/DMR_Good_Baseline_vs_Control.csv", row.names = 1)
head(DMR_GR_C)
DMR_BR_C <- read.csv("Results_DMR/DMR_Bad_Baseline_vs_Control.csv", row.names = 1)
head(DMR_BR_C)
Bad_response_Baseline_DMR <- read.csv("Results_DMR/Specific_Bad_response.csv", row.names = 1)
head(Bad_response_Baseline_DMR)
Good_response_Post_DMR <- read.csv("Results_DMR/DMR_Good_Post_vs_Control.csv", row.names = 1)
head(Good_response_Post_DMR)
DMR_GR_C <- read.csv("Results_DMR/DMR_Good_Baseline_vs_Control.csv", row.names = 1)
head(DMR_GR_C)
DMR_BR_C <- read.csv("Results_DMR/DMR_Bad_Baseline_vs_Control.csv", row.names = 1)
head(DMR_BR_C)
Bad_response_Baseline_DMR <- read.csv("Results_DMR/Specific_Bad_response.csv", row.names = 1)
head(Bad_response_Baseline_DMR)
Good_response_Post_DMR <- read.csv("Results_DMR/DMR_Good_Post_vs_Control.csv", row.names = 1)
head(Good_response_Post_DMR)
Bad_response_Post_DMR <- read.csv("Results_DMR/DMR_Bad_Post_vs_Control.csv", row.names = 1)
head(Bad_response_Post_DMR)
Bad_response_Post_DMR <- read.csv("Results_DMR/Specific_Bad_response_Post.csv", row.names = 1)
head(Bad_response_Post_DMR)
Bad_response_Baseline_DMR
library(dplyr)
library(ChAMP)
library(GenomicRanges)
"%ni%" <- Negate("%in%")
IDH1_DMR_WGBS <- read.csv("WGBS_Wilson_Tables/IDH1_DMR_WGBS.xlsx")
IDH1_DMR_WGBS <- read.table("WGBS_Wilson_Tables/IDH1_DMR_WGBS.xlsx")
View(IDH1_DMR_WGBS)
IDH1_DMR_WGBS <- read.table("WGBS_Wilson_Tables/IDH1_DMR_WGBS.csv")
View(IDH1_DMR_WGBS)
IDH1_DMR_WGBS <- read.csv("WGBS_Wilson_Tables/IDH1_DMR_WGBS.csv")
View(IDH1_DMR_WGBS)
IDH2_DMR_WGBS <- read.csv("WGBS_Wilson_Tables/IDH2_DMR_WGBS.csv")
Specific_Bad_response <- read.delim("~/GitHub/Koichi_Methylation_analysis/Results_DMR/Specific_Bad_response.csv")
View(Specific_Bad_response)
DMR_specific_response_GRanges <- GRanges(
seqnames = Specific_Bad_response$chrom,
ranges = IRanges(start = Specific_Bad_response$chromStart, end = Specific_Bad_response$chromEnd),
DMR_number = rownames(Specific_Bad_response)
)
IDH2_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH2_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH2_DMR_WGBS$start, end = IDH2_DMR_WGBS$end),
DMR_number = rownames(IDH2_DMR_WGBS)
)
overlaps_Baseline_Response_IDH1 <- findOverlaps(DMR_specific_response_GRanges, IDH1_DMR_WGBS_GRanges)
IDH1_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH1_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH1_DMR_WGBS$start, end = IDH1_DMR_WGBS$end),
DMR_number = rownames(IDH1_DMR_WGBS)
)
overlaps_Baseline_Response_IDH1 <- findOverlaps(DMR_specific_response_GRanges, IDH1_DMR_WGBS_GRanges)
overlaps_Baseline_Response_IDH1 <- findOverlaps(DMR_specific_response_GRanges, IDH1_DMR_WGBS_GRanges)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(DMR_specific_response_GRanges[queryHits(overlaps_Baseline_Response_IDH1),]),
data.frame(mcols(DMR_specific_response_GRanges[subjectHits(overlaps_Baseline_Response_IDH1),])))
overlaps_Baseline_Response_IDH1 <- findOverlaps(IDH2_DMR_WGBS_GRanges, DMR_specific_response_GRanges)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(IDH2_DMR_WGBS_GRanges[queryHits(overlaps_Baseline_Response_IDH1),]),
data.frame(mcols(DMR_specific_response_GRanges[subjectHits(overlaps_Baseline_Response_IDH1),])))
View(IDH1_DMR_WGBS_GRanges)
View(DMR_specific_response_GRanges)
overlaps_Baseline_Response_IDH1 <- findOverlaps(IDH1_DMR_WGBS_GRanges, DMR_specific_response_GRanges)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(IDH1_DMR_WGBS_GRanges[queryHits(overlaps_Baseline_Response_IDH1),]),
data.frame(mcols(DMR_specific_response_GRanges[subjectHits(overlaps_Baseline_Response_IDH1),])))
overlaps_Baseline_Response_IDH2 <- findOverlaps(IDH2_DMR_WGBS_GRanges, DMR_specific_response_GRanges)
overlaps_Baseline_Response_IDH2_df <- data.frame(mcols(IDH2_DMR_WGBS_GRanges[queryHits(overlaps_Baseline_Response_IDH2),]),
data.frame(mcols(DMR_specific_response_GRanges[subjectHits(overlaps_Baseline_Response_IDH2),])))
Specific_Bad_response_Baseline_IDH1 <- Specific_Bad_response[rownames(Specific_Bad_response) %in% overlaps_GP_BP_df$DMR_name.1,]
View(overlaps_Baseline_Response_IDH2_df)
View(IDH1_DMR_WGBS)
A <- IDH1_DMR_WGBS_GRanges
B <- DMR_specific_response_GRanges
overlaps_Baseline_Response_IDH1 <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(overlaps_Baseline_Response_IDH1),]),
data.frame(mcols(B[subjectHits(overlaps_Baseline_Response_IDH1),])))
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
A <- DMR_specific_response_GRanges
B <- IDH1_DMR_WGBS_GRanges
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
A <- DMR_specific_response_GRanges
B <- IDH2_DMR_WGBS_GRanges
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH2_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
A <- DMR_specific_response_GRanges
B <- IDH2_DMR_WGBS_GRanges
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH2_df <- data.frame(mcols(B[queryHits(C),]),
data.frame(mcols(A[subjectHits(C),])))
A <- DMR_BR_C
B <- IDH1_DMR_WGBS_GRanges
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
A <- IDH1_DMR_WGBS_GRanges
B <- DMR_BR_C
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
DMR_specific_response_GRanges <- GRanges(
seqnames = Specific_Bad_response$chrom,
ranges = IRanges(start = Specific_Bad_response$chromStart, end = Specific_Bad_response$chromEnd),
DMR_number = rownames(Specific_Bad_response)
)
IDH1_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH1_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH1_DMR_WGBS$start, end = IDH1_DMR_WGBS$end),
DMR_number = rownames(IDH1_DMR_WGBS)
)
IDH2_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH2_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH2_DMR_WGBS$start, end = IDH2_DMR_WGBS$end),
DMR_number = rownames(IDH2_DMR_WGBS)
)
A <- IDH1_DMR_WGBS_GRanges
B <- DMR_BR_C
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
library(GenomicRanges)
DMR_specific_response_GRanges <- GRanges(
seqnames = Specific_Bad_response$chrom,
ranges = IRanges(start = Specific_Bad_response$chromStart, end = Specific_Bad_response$chromEnd),
DMR_number = rownames(Specific_Bad_response)
)
IDH1_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH1_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH1_DMR_WGBS$start, end = IDH1_DMR_WGBS$end),
DMR_number = rownames(IDH1_DMR_WGBS)
)
IDH2_DMR_WGBS_GRanges <- GRanges(
seqnames = IDH2_DMR_WGBS$seqnames,
ranges = IRanges(start = IDH2_DMR_WGBS$start, end = IDH2_DMR_WGBS$end),
DMR_number = rownames(IDH2_DMR_WGBS)
)
A <- IDH1_DMR_WGBS_GRanges
B <- DMR_BR_C
C <- findOverlaps(A, B)
overlaps_Baseline_Response_IDH1_df <- data.frame(mcols(A[queryHits(C),]),
data.frame(mcols(B[subjectHits(C),])))
?findOverlaps
